/* eslint-disable import/no-named-as-default-member */
/* eslint-disable import/no-named-as-default */
import { writeFile, readFileSync } from 'fs';

const newline = '\r\n'; // New line code

export default async function vars(cb) {
    const tEhd = JSON.parse(readFileSync('./t-ehd.json'));
    const colorsJson = tEhd.colors;
    const layoutJson = tEhd.layout;


    let content = '';
    content += `// ----------------------${newline}`;
    content += `// Warning, this file is dynamically generated from the t-ehd.json in the root of the theme. Do not edit this file directly, edit t-ehd.json${newline}`;
    content += `// -----------------------${newline}${newline}`;


  
    // Loop each of the colors
     content += `// Colors${newline}`;
    content += colorsJson.map((color) => `$${color.slug}: ${color.color};`).join(`${newline}`);

        // Output colours as CSS Variables
    content += `${newline}${newline}`;
    content += `:root {${newline}`;
    content += colorsJson.map((color) => `   --color-${color.slug}: ${color.color};`).join(`${newline}`);
   content += `${newline}}`;

    // Output colours for Block Themes
    content += `${newline}${newline}`;
    content += `// Theme Colors${newline}`;

    content += `${newline}$color-map: (${newline}`;
    content += colorsJson.filter((color) => color.foreground !== undefined).map(
      (color) => {
        let scssEntry = `"${color.slug}":(bgcolor:${color.color}, fgcolor:${color.foreground}`;
        if (color.accent) {
          scssEntry += `, accentcolor:${color.accent}`;
        }
        if (color.accentContrast) {
          scssEntry += `, accentcolorcontrast:${color.accentContrast}`;
        } else if(color.accent) {
          scssEntry += `, accentcolorcontrast:${adjustColor(color.accent, adjustAmount(color.accent))}`;
        }
      
      scssEntry += ')';
    return scssEntry;
  }
).join(',');
    content += `${newline});${newline}`;

    // Output colours for Theme initial Colours
    content += `${newline}${newline}`;
    content += `// Initial Colors${newline}`;
    content += colorsJson.filter((color) => color.defaultBG === true).map(
      (color) => `
$bgcolor:${color.color};
$fgcolor:${color.foreground};
$accent:${color.accent};
$accentcolorcontrast:${adjustColor(color.accent, adjustAmount(color.accent))};

`);
content += colorsJson.filter((color) => color.isAccent === true).map(
      (color) => `
$accent:${color.color};
`);
    //_______________
    // Output the layout
    //_______________
    content += `${newline}${newline}`;
    content += `// Layout${newline}`;
    content += `$content-size: ${layoutJson.contentSize};${newline}`;
    content += `$wide-size: ${layoutJson.wideSize};${newline}`;

    // -------------------------------------------------------------------------
    // Save it to disk
    // -------------------------------------------------------------------------
    const file = 'src/scss/_vars.scss';

    writeFile(file, content, {}, (err) => {
        if (err) {
            throw err;
        }
    });

    // -------------------------------------------------------------------------
    // Complete the callback saying we are done
    // -------------------------------------------------------------------------
    cb();
}

function isColorLight(color) {
    // Convert hex color to RGB
    let r, g, b;
    if (color.startsWith('#')) {
        let hex = color.replace('#', '');
        r = parseInt(hex.slice(0, 2), 16);
        g = parseInt(hex.slice(2, 4), 16);
        b = parseInt(hex.slice(4, 6), 16);
    }

    // Calculate luminance
    const luminance = 0.2126 * r + 0.7152 * g + 0.0722 * b;  // Rec. 709 luminance formula
    return luminance > 128;  // Returns true if light, false if dark
}

function adjustColor(color, amount) {
    let usePound = false;

    if (color[0] == "#") {
        color = color.slice(1);
        usePound = true;
    }

    let num = parseInt(color, 16);

    let r = (num >> 16) + amount;
    let b = ((num >> 8) & 0x00FF) + amount;
    let g = (num & 0x0000FF) + amount;

    if (r > 255) r = 255;
    else if (r < 0) r = 0;

    if (g > 255) g = 255;
    else if (g < 0) g = 0;

    if (b > 255) b = 255;
    else if (b < 0) b = 0;

    return (usePound ? "#" : "") + (g | (b << 8) | (r << 16)).toString(16);
}

function adjustAmount(color) {
    return isColorLight(color) ? -50 : 50;
}